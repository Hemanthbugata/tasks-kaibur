{"ast":null,"code":"import React,{useState}from'react';import{Input,Button,notification}from'antd';import{executeTask}from'../api/taskApi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CommandExecution=()=>{const[taskId,setTaskId]=useState('');// Assuming taskId is entered by the user\nconst[command,setCommand]=useState('');const[executionResult,setExecutionResult]=useState('');const handleExecuteCommand=async()=>{try{const result=await executeTask(taskId,command);// Passing both taskId and command\nif(result){setExecutionResult(result.output);notification.success({message:'Command Executed Successfully'});}else{notification.error({message:'Command Execution Failed'});}}catch(error){// Explicitly define the error type as 'any'\nnotification.error({message:'Error Executing Command',description:error.message});}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Input,{value:taskId,onChange:e=>setTaskId(e.target.value),placeholder:\"Enter Task ID\",style:{marginBottom:'10px'}}),/*#__PURE__*/_jsx(Input.TextArea,{value:command,onChange:e=>setCommand(e.target.value),placeholder:\"Enter Command\",rows:4}),/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:handleExecuteCommand,style:{marginTop:'10px'},children:\"Execute Command\"}),executionResult&&/*#__PURE__*/_jsx(\"pre\",{style:{marginTop:'10px',backgroundColor:'#f4f4f4',padding:'10px'},children:executionResult})]});};export default CommandExecution;","map":{"version":3,"names":["React","useState","Input","Button","notification","executeTask","jsx","_jsx","jsxs","_jsxs","CommandExecution","taskId","setTaskId","command","setCommand","executionResult","setExecutionResult","handleExecuteCommand","result","output","success","message","error","description","children","value","onChange","e","target","placeholder","style","marginBottom","TextArea","rows","type","onClick","marginTop","backgroundColor","padding"],"sources":["C:/Users/Hemanthbugata/Desktop/tasks-kabiur/frontend/src/components/CommandExecution.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Input, Button, notification } from 'antd';\r\nimport { executeTask } from '../api/taskApi';\r\n\r\nconst CommandExecution: React.FC = () => {\r\n  const [taskId, setTaskId] = useState(''); // Assuming taskId is entered by the user\r\n  const [command, setCommand] = useState('');\r\n  const [executionResult, setExecutionResult] = useState('');\r\n\r\n  const handleExecuteCommand = async () => {\r\n    try {\r\n      const result = await executeTask(taskId, command); // Passing both taskId and command\r\n\r\n      if (result) {\r\n        setExecutionResult(result.output);\r\n        notification.success({\r\n          message: 'Command Executed Successfully',\r\n        });\r\n      } else {\r\n        notification.error({\r\n          message: 'Command Execution Failed',\r\n        });\r\n      }\r\n    } catch (error: any) {  // Explicitly define the error type as 'any'\r\n      notification.error({\r\n        message: 'Error Executing Command',\r\n        description: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Input\r\n        value={taskId}\r\n        onChange={(e) => setTaskId(e.target.value)}\r\n        placeholder=\"Enter Task ID\"\r\n        style={{ marginBottom: '10px' }}\r\n      />\r\n      <Input.TextArea\r\n        value={command}\r\n        onChange={(e) => setCommand(e.target.value)}\r\n        placeholder=\"Enter Command\"\r\n        rows={4}\r\n      />\r\n      <Button type=\"primary\" onClick={handleExecuteCommand} style={{ marginTop: '10px' }}>\r\n        Execute Command\r\n      </Button>\r\n      {executionResult && (\r\n        <pre style={{ marginTop: '10px', backgroundColor: '#f4f4f4', padding: '10px' }}>\r\n          {executionResult}\r\n        </pre>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommandExecution;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,KAAK,CAAEC,MAAM,CAAEC,YAAY,KAAQ,MAAM,CAClD,OAASC,WAAW,KAAQ,gBAAgB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE7C,KAAM,CAAAC,gBAA0B,CAAGA,CAAA,GAAM,CACvC,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAAE;AAC1C,KAAM,CAACY,OAAO,CAAEC,UAAU,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACc,eAAe,CAAEC,kBAAkB,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CAE1D,KAAM,CAAAgB,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CACvC,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAb,WAAW,CAACM,MAAM,CAAEE,OAAO,CAAC,CAAE;AAEnD,GAAIK,MAAM,CAAE,CACVF,kBAAkB,CAACE,MAAM,CAACC,MAAM,CAAC,CACjCf,YAAY,CAACgB,OAAO,CAAC,CACnBC,OAAO,CAAE,+BACX,CAAC,CAAC,CACJ,CAAC,IAAM,CACLjB,YAAY,CAACkB,KAAK,CAAC,CACjBD,OAAO,CAAE,0BACX,CAAC,CAAC,CACJ,CACF,CAAE,MAAOC,KAAU,CAAE,CAAG;AACtBlB,YAAY,CAACkB,KAAK,CAAC,CACjBD,OAAO,CAAE,yBAAyB,CAClCE,WAAW,CAAED,KAAK,CAACD,OACrB,CAAC,CAAC,CACJ,CACF,CAAC,CAED,mBACEZ,KAAA,QAAAe,QAAA,eACEjB,IAAA,CAACL,KAAK,EACJuB,KAAK,CAAEd,MAAO,CACde,QAAQ,CAAGC,CAAC,EAAKf,SAAS,CAACe,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC3CI,WAAW,CAAC,eAAe,CAC3BC,KAAK,CAAE,CAAEC,YAAY,CAAE,MAAO,CAAE,CACjC,CAAC,cACFxB,IAAA,CAACL,KAAK,CAAC8B,QAAQ,EACbP,KAAK,CAAEZ,OAAQ,CACfa,QAAQ,CAAGC,CAAC,EAAKb,UAAU,CAACa,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC5CI,WAAW,CAAC,eAAe,CAC3BI,IAAI,CAAE,CAAE,CACT,CAAC,cACF1B,IAAA,CAACJ,MAAM,EAAC+B,IAAI,CAAC,SAAS,CAACC,OAAO,CAAElB,oBAAqB,CAACa,KAAK,CAAE,CAAEM,SAAS,CAAE,MAAO,CAAE,CAAAZ,QAAA,CAAC,iBAEpF,CAAQ,CAAC,CACRT,eAAe,eACdR,IAAA,QAAKuB,KAAK,CAAE,CAAEM,SAAS,CAAE,MAAM,CAAEC,eAAe,CAAE,SAAS,CAAEC,OAAO,CAAE,MAAO,CAAE,CAAAd,QAAA,CAC5ET,eAAe,CACb,CACN,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAAL,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
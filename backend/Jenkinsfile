pipeline {
    agent any
    tools {
        jdk 'jdk17' // Ensure JDK 17 is installed in Jenkins
        maven 'Maven 3' // Add Maven tool (name must match Jenkins tool config)
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner' // SonarQube scanner tool path
        IMAGE_NAME = 'backend-spring' // Docker image name
        REGISTRY = 'docker.io' // Docker Hub registry
        IMAGE_TAG = 'latest' // Docker image tag
        SONARQUBE_SERVER = 'SonarQube' // SonarQube server name configured in Jenkins
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs() // Clean the workspace before starting the build
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Hemanthbugata/tasks-kaibur.git', credentialsId: 'GIT'
            }
        }

        stage('Maven Build') {
            steps {
                sh 'mvn clean install -DskipTests'  // Build the Java project
            }
        }

       stage("Sonarqube Analysis ") {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=springboot-backend \
                    -Dsonar.projectKey=springboot-backend '''
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'springboot' // Wait for the SonarQube quality gate status
                }
            }
        }

        stage('OWASP Dependency-Check Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check' // OWASP Dependency-Check Scan
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml' // Publish the Dependency-Check report
            }
        }

        stage('Trivy File System Scan') {
            steps {
                sh "trivy fs . > trivyfs.txt" // Perform a Trivy file system scan to check for vulnerabilities in the project
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'DockerHub-Credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "docker login -u $DOCKER_USER -p $DOCKER_PASS"
                        sh "docker build -t $REGISTRY/$IMAGE_NAME:$IMAGE_TAG ." // Build Docker image
                        sh "docker push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG" // Push image to Docker Hub
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh "trivy image $REGISTRY/$IMAGE_NAME:$IMAGE_TAG > trivyimage.txt" // Scan the built Docker image using Trivy for vulnerabilities
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline execution failed!'
        }
    }
}

{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hemanthbugata\\\\Desktop\\\\tasks-kabiur\\\\frontend\\\\src\\\\components\\\\TaskList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Table, Button, notification } from 'antd';\nimport { getTasks, deleteTask } from '../api/taskApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    getTasks().then(data => setTasks(data));\n  }, []);\n  const handleDelete = async taskId => {\n    try {\n      const response = await deleteTask(taskId);\n      if (response) {\n        notification.success({\n          message: 'Task Deleted Successfully'\n        });\n        setTasks(tasks.filter(task => task.id !== taskId));\n      } else {\n        notification.error({\n          message: 'Error Deleting Task'\n        });\n      }\n    } catch (error) {\n      // Type assertion to handle the 'unknown' type error\n      if (error instanceof Error) {\n        notification.error({\n          message: 'Error Deleting Task'\n        });\n      } else {\n        notification.error({\n          message: 'Unknown error',\n          description: 'An unknown error occurred'\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Table, {\n    dataSource: tasks,\n    rowKey: \"id\",\n    columns: [{\n      title: 'Task Name',\n      dataIndex: 'name',\n      key: 'name'\n    }, {\n      title: 'Command',\n      dataIndex: 'command',\n      key: 'command'\n    }, {\n      title: 'Action',\n      key: 'action',\n      render: (_, record) => /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => handleDelete(record.id),\n        danger: true,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)\n    }]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","Table","Button","notification","getTasks","deleteTask","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","then","data","handleDelete","taskId","response","success","message","filter","task","id","error","Error","description","dataSource","rowKey","columns","title","dataIndex","key","render","_","record","onClick","danger","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Hemanthbugata/Desktop/tasks-kabiur/frontend/src/components/TaskList.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Table, Button, notification } from 'antd';\r\nimport { Task } from '../types/TaskTypes';\r\nimport { getTasks, deleteTask } from '../api/taskApi';\r\n\r\nconst TaskList: React.FC = () => {\r\n  const [tasks, setTasks] = useState<Task[]>([]);\r\n\r\n  useEffect(() => {\r\n    getTasks().then((data) => setTasks(data));\r\n  }, []);\r\n\r\n  const handleDelete = async (taskId: string) => {\r\n    try {\r\n      const response = await deleteTask(taskId);\r\n      if (response) {\r\n        notification.success({\r\n          message: 'Task Deleted Successfully',\r\n        });\r\n        setTasks(tasks.filter((task) => task.id !== taskId));\r\n      } else {\r\n        notification.error({\r\n          message: 'Error Deleting Task',\r\n        });\r\n      }\r\n    } catch (error: unknown) {\r\n      // Type assertion to handle the 'unknown' type error\r\n      if (error instanceof Error) {\r\n        notification.error({\r\n          message: 'Error Deleting Task',\r\n        });\r\n      } else {\r\n        notification.error({\r\n          message: 'Unknown error',\r\n          description: 'An unknown error occurred',\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Table\r\n      dataSource={tasks}\r\n      rowKey=\"id\"\r\n      columns={[\r\n        { title: 'Task Name', dataIndex: 'name', key: 'name' },\r\n        { title: 'Command', dataIndex: 'command', key: 'command' },\r\n        {\r\n          title: 'Action',\r\n          key: 'action',\r\n          render: (_, record) => (\r\n            <Button onClick={() => handleDelete(record.id)} danger>\r\n              Delete\r\n            </Button>\r\n          ),\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,KAAK,EAAEC,MAAM,EAAEC,YAAY,QAAQ,MAAM;AAElD,SAASC,QAAQ,EAAEC,UAAU,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAS,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACdI,QAAQ,CAAC,CAAC,CAACQ,IAAI,CAAEC,IAAI,IAAKF,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC3C,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAG,MAAOC,MAAc,IAAK;IAC7C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,UAAU,CAACU,MAAM,CAAC;MACzC,IAAIC,QAAQ,EAAE;QACZb,YAAY,CAACc,OAAO,CAAC;UACnBC,OAAO,EAAE;QACX,CAAC,CAAC;QACFP,QAAQ,CAACD,KAAK,CAACS,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAAC,CAAC;MACtD,CAAC,MAAM;QACLZ,YAAY,CAACmB,KAAK,CAAC;UACjBJ,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOI,KAAc,EAAE;MACvB;MACA,IAAIA,KAAK,YAAYC,KAAK,EAAE;QAC1BpB,YAAY,CAACmB,KAAK,CAAC;UACjBJ,OAAO,EAAE;QACX,CAAC,CAAC;MACJ,CAAC,MAAM;QACLf,YAAY,CAACmB,KAAK,CAAC;UACjBJ,OAAO,EAAE,eAAe;UACxBM,WAAW,EAAE;QACf,CAAC,CAAC;MACJ;IACF;EACF,CAAC;EAED,oBACEjB,OAAA,CAACN,KAAK;IACJwB,UAAU,EAAEf,KAAM;IAClBgB,MAAM,EAAC,IAAI;IACXC,OAAO,EAAE,CACP;MAAEC,KAAK,EAAE,WAAW;MAAEC,SAAS,EAAE,MAAM;MAAEC,GAAG,EAAE;IAAO,CAAC,EACtD;MAAEF,KAAK,EAAE,SAAS;MAAEC,SAAS,EAAE,SAAS;MAAEC,GAAG,EAAE;IAAU,CAAC,EAC1D;MACEF,KAAK,EAAE,QAAQ;MACfE,GAAG,EAAE,QAAQ;MACbC,MAAM,EAAEA,CAACC,CAAC,EAAEC,MAAM,kBAChB1B,OAAA,CAACL,MAAM;QAACgC,OAAO,EAAEA,CAAA,KAAMpB,YAAY,CAACmB,MAAM,CAACZ,EAAE,CAAE;QAACc,MAAM;QAAAC,QAAA,EAAC;MAEvD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAEZ,CAAC;EACD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAAC/B,EAAA,CAtDID,QAAkB;AAAAiC,EAAA,GAAlBjC,QAAkB;AAwDxB,eAAeA,QAAQ;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
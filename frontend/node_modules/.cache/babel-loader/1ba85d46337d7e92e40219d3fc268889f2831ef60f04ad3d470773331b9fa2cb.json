{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hemanthbugata\\\\Desktop\\\\tasks-kabiur\\\\frontend\\\\src\\\\components\\\\TaskForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Form, Input, Button, notification } from 'antd';\nimport { createTask } from '../api/taskApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskForm = () => {\n  _s();\n  const [taskName, setTaskName] = useState('');\n  const [taskCommand, setTaskCommand] = useState('');\n  const handleCreateTask = async () => {\n    const taskData = {\n      id: 'temp-id',\n      // Generate the ID server-side, don't use it client-side\n      name: taskName,\n      command: taskCommand\n    };\n    try {\n      const response = await createTask(taskData);\n      if (response) {\n        notification.success({\n          message: 'Task Created Successfully'\n        });\n      } else {\n        notification.error({\n          message: 'Error Creating Task'\n        });\n      }\n    } catch (error) {\n      // Type assertion to handle the 'unknown' type error\n      if (error instanceof Error) {\n        notification.error({\n          message: 'Error Creating Task'\n        });\n      } else {\n        notification.error({\n          message: 'Unknown error',\n          description: 'An unknown error occurred'\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Form, {\n    style: {\n      maxWidth: '400px',\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Task Name\",\n      required: true,\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        value: taskName,\n        onChange: e => setTaskName(e.target.value),\n        placeholder: \"Enter Task Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Task Command\",\n      required: true,\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        value: taskCommand,\n        onChange: e => setTaskCommand(e.target.value),\n        placeholder: \"Enter Command\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: handleCreateTask,\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskForm, \"m6XGUN6+az587MqrJPYwf4GbxSM=\");\n_c = TaskForm;\nexport default TaskForm;\nvar _c;\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"names":["React","useState","Form","Input","Button","notification","createTask","jsxDEV","_jsxDEV","TaskForm","_s","taskName","setTaskName","taskCommand","setTaskCommand","handleCreateTask","taskData","id","name","command","response","success","message","error","Error","description","style","maxWidth","margin","children","Item","label","required","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Hemanthbugata/Desktop/tasks-kabiur/frontend/src/components/TaskForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Input, Button, notification } from 'antd';\r\nimport { Task } from '../types/TaskTypes';\r\nimport { createTask } from '../api/taskApi';\r\n\r\nconst TaskForm: React.FC = () => {\r\n  const [taskName, setTaskName] = useState('');\r\n  const [taskCommand, setTaskCommand] = useState('');\r\n\r\n  const handleCreateTask = async () => {\r\n    const taskData: Task = {\r\n      id: 'temp-id', // Generate the ID server-side, don't use it client-side\r\n      name: taskName,\r\n      command: taskCommand,\r\n    };\r\n\r\n    try {\r\n      const response = await createTask(taskData);\r\n\r\n      if (response) {\r\n        notification.success({\r\n          message: 'Task Created Successfully',\r\n        });\r\n      } else {\r\n        notification.error({\r\n          message: 'Error Creating Task',\r\n        });\r\n      }\r\n    } catch (error: unknown) {\r\n      // Type assertion to handle the 'unknown' type error\r\n      if (error instanceof Error) {\r\n        notification.error({\r\n          message: 'Error Creating Task',\r\n        });\r\n      } else {\r\n        notification.error({\r\n          message: 'Unknown error',\r\n          description: 'An unknown error occurred',\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form style={{ maxWidth: '400px', margin: '0 auto' }}>\r\n      <Form.Item label=\"Task Name\" required>\r\n        <Input\r\n          value={taskName}\r\n          onChange={(e) => setTaskName(e.target.value)}\r\n          placeholder=\"Enter Task Name\"\r\n        />\r\n      </Form.Item>\r\n\r\n      <Form.Item label=\"Task Command\" required>\r\n        <Input\r\n          value={taskCommand}\r\n          onChange={(e) => setTaskCommand(e.target.value)}\r\n          placeholder=\"Enter Command\"\r\n        />\r\n      </Form.Item>\r\n\r\n      <Form.Item>\r\n        <Button type=\"primary\" onClick={handleCreateTask}>\r\n          Create Task\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default TaskForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,YAAY,QAAQ,MAAM;AAExD,SAASC,UAAU,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMc,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,MAAMC,QAAc,GAAG;MACrBC,EAAE,EAAE,SAAS;MAAE;MACfC,IAAI,EAAEP,QAAQ;MACdQ,OAAO,EAAEN;IACX,CAAC;IAED,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMd,UAAU,CAACU,QAAQ,CAAC;MAE3C,IAAII,QAAQ,EAAE;QACZf,YAAY,CAACgB,OAAO,CAAC;UACnBC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ,CAAC,MAAM;QACLjB,YAAY,CAACkB,KAAK,CAAC;UACjBD,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOC,KAAc,EAAE;MACvB;MACA,IAAIA,KAAK,YAAYC,KAAK,EAAE;QAC1BnB,YAAY,CAACkB,KAAK,CAAC;UACjBD,OAAO,EAAE;QACX,CAAC,CAAC;MACJ,CAAC,MAAM;QACLjB,YAAY,CAACkB,KAAK,CAAC;UACjBD,OAAO,EAAE,eAAe;UACxBG,WAAW,EAAE;QACf,CAAC,CAAC;MACJ;IACF;EACF,CAAC;EAED,oBACEjB,OAAA,CAACN,IAAI;IAACwB,KAAK,EAAE;MAAEC,QAAQ,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAS,CAAE;IAAAC,QAAA,gBACnDrB,OAAA,CAACN,IAAI,CAAC4B,IAAI;MAACC,KAAK,EAAC,WAAW;MAACC,QAAQ;MAAAH,QAAA,eACnCrB,OAAA,CAACL,KAAK;QACJ8B,KAAK,EAAEtB,QAAS;QAChBuB,QAAQ,EAAGC,CAAC,IAAKvB,WAAW,CAACuB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC7CI,WAAW,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO,CAAC,eAEZjC,OAAA,CAACN,IAAI,CAAC4B,IAAI;MAACC,KAAK,EAAC,cAAc;MAACC,QAAQ;MAAAH,QAAA,eACtCrB,OAAA,CAACL,KAAK;QACJ8B,KAAK,EAAEpB,WAAY;QACnBqB,QAAQ,EAAGC,CAAC,IAAKrB,cAAc,CAACqB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAChDI,WAAW,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO,CAAC,eAEZjC,OAAA,CAACN,IAAI,CAAC4B,IAAI;MAAAD,QAAA,eACRrB,OAAA,CAACJ,MAAM;QAACsC,IAAI,EAAC,SAAS;QAACC,OAAO,EAAE5B,gBAAiB;QAAAc,QAAA,EAAC;MAElD;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEX,CAAC;AAAC/B,EAAA,CA/DID,QAAkB;AAAAmC,EAAA,GAAlBnC,QAAkB;AAiExB,eAAeA,QAAQ;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
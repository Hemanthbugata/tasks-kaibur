pipeline {
    agent any
    tools {
        jdk 'jdk21' // Ensure JDK 17 is installed in Jenkins
        maven 'Maven 3' // Add Maven tool (name must match Jenkins tool config)
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner' // SonarQube scanner tool path
        SONARQUBE_SERVER = 'SonarQube' // SonarQube server name configured in Jenkins
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs() // Clean the workspace before starting the build
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Hemanthbugata/tasks-kaibur.git', credentialsId: 'GIT'
            }
        }

        stage('Maven Build') {
            steps {
                dir('backend') { // Change 'backend' to the correct subdirectory if needed
                    sh 'mvn clean install -DskipTests'
                }
             }
        }
       stage("Sonarqube Analysis ") {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh ''' 
                    $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=springboot-backend \
                    -Dsonar.projectKey=springboot-backend \
                    -Dsonar.java.binaries=backend/target/classes
                    '''
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'springboot' // Wait for the SonarQube quality gate status
                }
            }
        }

        stage('Trivy File System Scan') {
            steps {
                sh "trivy fs . > trivyfs.txt" // Perform a Trivy file system scan to check for vulnerabilities in the project
            }
        }

         stage('Docker Build & Push') {
                steps {
                    withDockerRegistry(credentialsId: 'docker', url: 'https://index.docker.io/v1/' ) {
                        sh '''
                            echo "Building Docker Image..."
                            docker build -t springboot-backend -f backend/Dockerfile .
            
                            echo "Tagging Docker Image..."
                            docker tag springboot-backend hemanth0102/springboot-backend:latest
            
                            echo "Pushing Docker Image..."
                            docker push hemanth0102/springboot-backend:latest
                        '''
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                 sh "trivy image --format table --output trivyimage.txt hemanth0102/springboot-backend:latest"
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline execution failed!'
        }
    }
}
